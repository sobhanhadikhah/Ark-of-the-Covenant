'use strict';

var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var Cursor = function Cursor() {
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "cursor-style"
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "bar"
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    style: {
      position: "relative"
    }
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "autocomplete empty"
  })));
};

var keywords = ["await", "const", "let", "var"];
var operators = [":", "[", "]", ","];

var Code = function Code(_ref) {
  var code = _ref.code,
      children = _ref.children;

  var _useState = React.useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      nth = _useState2[0],
      setNth = _useState2[1];

  var _useState3 = React.useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      tokens = _useState4[0],
      setTokens = _useState4[1];

  var numLines = code.split(/\r\n|\r|\n/).length;

  var loop = function loop() {
    var tokenCount = tokens.length;
    var e = nth + 1;
    var i = e >= tokenCount ? 0 : e;
    setTimeout(function () {
      return setNth(i);
    }, 200);
  };

  var parseCode = function parseCode() {
    var words = code.split(/(\.| |\(\{|:|\[|\]|\,|])/);
    var tokenArr = [];

    var _loop = function _loop(i) {
      var lastPunc = [];
      var lastChars = "";
      var word = words[i];
      var lastWord = words[i - 1];
      var chars = word.split("");
      var charSeq = [];

      var wordType = function wordType() {
        if (operators.includes(word)) return "operator";
        if (word.includes("'")) return "string";
        if (word === "\n" || word === "({") return "punctuation";
        if (lastWord === ".") return "function";
        if (keywords.includes(word)) return "keyword";
        return "normal";
      };

      for (var j = 0; j < chars.length; j++) {
        var _char = chars[j];
        var lastSequence = tokenArr[tokenArr.length - 1];
        var history = lastSequence ? lastSequence[lastSequence.length - 1].filter(function (last) {
          return last.type !== "cursor";
        }) : [];
        lastChars = lastChars + _char;
        charSeq.push([].concat(_toConsumableArray(history), lastPunc, [{
          type: wordType(),
          "char": lastChars ? lastChars : _char
        }, {
          type: "cursor"
        }]));
      }

      if (charSeq.length) {
        tokenArr.push(charSeq);
      }
    };

    for (var i = 0; i < words.length; i++) {
      _loop(i);
    }

    setTokens(tokenArr.flat());
  };

  React.useEffect(loop, [nth, tokens]);
  React.useEffect(parseCode, []);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: "code-editor"
  }, /*#__PURE__*/React__default["default"].createElement("pre", null, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "line-numbers"
  }, Array.from(Array(numLines).keys()).map(function (_, index) {
    return /*#__PURE__*/React__default["default"].createElement("span", {
      key: index
    }, index + 1);
  }), /*#__PURE__*/React__default["default"].createElement("span", null, "~"), /*#__PURE__*/React__default["default"].createElement("span", null, "~"), /*#__PURE__*/React__default["default"].createElement("span", null, "~"), /*#__PURE__*/React__default["default"].createElement("span", null, "~")), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "typing-area"
  }, tokens[nth] && tokens[nth].map(function (token, index) {
    if (token.type === "cursor") {
      return /*#__PURE__*/React__default["default"].createElement(Cursor, {
        key: index
      });
    }

    return /*#__PURE__*/React__default["default"].createElement("div", {
      key: index,
      className: "token ".concat(token.type)
    }, token["char"]);
  }))), children);
};

module.exports = Code;
